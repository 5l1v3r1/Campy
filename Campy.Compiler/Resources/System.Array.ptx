//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-22781540
// Cuda compilation tools, release 9.0, V9.0.176
// Based on LLVM 3.4svn
//

.version 6.0
.target sm_35
.address_size 64

	// .weak	cudaMalloc
.extern .func  (.param .b64 func_retval0) _Z12Heap_GetTypePh
(
	.param .b64 _Z12Heap_GetTypePh_param_0
)
;
.extern .func  (.param .b64 func_retval0) _Z14Heap_AllocTypeP12tMD_TypeDef_
(
	.param .b64 _Z14Heap_AllocTypeP12tMD_TypeDef__param_0
)
;
.extern .func  (.param .b32 func_retval0) _Z21Type_IsAssignableFromP12tMD_TypeDef_S0_
(
	.param .b64 _Z21Type_IsAssignableFromP12tMD_TypeDef_S0__param_0,
	.param .b64 _Z21Type_IsAssignableFromP12tMD_TypeDef_S0__param_1
)
;
.extern .func  (.param .b64 func_retval0) _Z10Heap_AllocP12tMD_TypeDef_j
(
	.param .b64 _Z10Heap_AllocP12tMD_TypeDef_j_param_0,
	.param .b32 _Z10Heap_AllocP12tMD_TypeDef_j_param_1
)
;
.extern .global .align 8 .b64 types;

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z30System_Array_Internal_GetValuePhS_S_
.visible .func  (.param .b64 func_retval0) _Z30System_Array_Internal_GetValuePhS_S_(
	.param .b64 _Z30System_Array_Internal_GetValuePhS_S__param_0,
	.param .b64 _Z30System_Array_Internal_GetValuePhS_S__param_1,
	.param .b64 _Z30System_Array_Internal_GetValuePhS_S__param_2
)
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<4>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<38>;


	ld.param.u64 	%rd17, [_Z30System_Array_Internal_GetValuePhS_S__param_0];
	ld.param.u64 	%rd18, [_Z30System_Array_Internal_GetValuePhS_S__param_1];
	ld.param.u64 	%rd7, [_Z30System_Array_Internal_GetValuePhS_S__param_2];
	ld.u32 	%r1, [%rd18];
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd17;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd19, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.u64 	%rd1, [%rd19+168];
	add.s64 	%rd2, %rd1, 112;
	ld.u32 	%r2, [%rd1+112];
	cvt.u64.u32	%rd3, %r2;
	mul.lo.s32 	%r3, %r2, %r1;
	cvt.u64.u32	%rd4, %r3;
	add.s64 	%rd20, %rd4, %rd17;
	add.s64 	%rd5, %rd20, 4;
	ld.u8 	%rs1, [%rd1+54];
	setp.eq.s16	%p1, %rs1, 0;
	@%p1 bra 	BB6_8;

	ld.global.u64 	%rd21, [types];
	ld.u64 	%rd22, [%rd21+368];
	ld.u64 	%rd23, [%rd2+40];
	setp.eq.s64	%p2, %rd23, %rd22;
	@%p2 bra 	BB6_4;

	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd1;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z14Heap_AllocTypeP12tMD_TypeDef_, 
	(
	param0
	);
	ld.param.b64	%rd37, [retval0+0];
	
	//{
	}// Callseq End 1
	mov.u64 	%rd35, 0;
	setp.eq.s64	%p3, %rd3, 0;
	@%p3 bra 	BB6_7;

BB6_3:
	add.s64 	%rd25, %rd5, %rd35;
	ld.u8 	%rs2, [%rd25];
	add.s64 	%rd26, %rd37, %rd35;
	st.u8 	[%rd26], %rs2;
	add.s64 	%rd35, %rd35, 1;
	setp.lt.u64	%p4, %rd35, %rd3;
	@%p4 bra 	BB6_3;
	bra.uni 	BB6_7;

BB6_8:
	ld.u32 	%r7, [%rd5];
	st.u32 	[%rd7], %r7;
	bra.uni 	BB6_9;

BB6_4:
	ld.u32 	%r4, [%rd5];
	setp.eq.s32	%p5, %r4, 0;
	mov.u64 	%rd37, 0;
	@%p5 bra 	BB6_7;

	cvt.u32.u64	%r5, %rd3;
	ld.u64 	%rd29, [%rd2+48];
	ld.u64 	%rd30, [%rd29];
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd30;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z14Heap_AllocTypeP12tMD_TypeDef_, 
	(
	param0
	);
	ld.param.b64	%rd37, [retval0+0];
	
	//{
	}// Callseq End 2
	add.s64 	%rd12, %rd20, 8;
	add.s32 	%r6, %r5, -4;
	cvt.u64.u32	%rd13, %r6;
	mov.u64 	%rd36, 0;
	setp.eq.s32	%p6, %r6, 0;
	@%p6 bra 	BB6_7;

BB6_6:
	add.s64 	%rd32, %rd12, %rd36;
	ld.u8 	%rs3, [%rd32];
	add.s64 	%rd33, %rd37, %rd36;
	st.u8 	[%rd33], %rs3;
	add.s64 	%rd36, %rd36, 1;
	setp.lt.u64	%p7, %rd36, %rd13;
	@%p7 bra 	BB6_6;

BB6_7:
	st.u64 	[%rd7], %rd37;

BB6_9:
	mov.u64 	%rd34, 0;
	st.param.b64	[func_retval0+0], %rd34;
	ret;
}

	// .globl	_Z30System_Array_Internal_SetValuePhS_S_
.visible .func  (.param .b64 func_retval0) _Z30System_Array_Internal_SetValuePhS_S_(
	.param .b64 _Z30System_Array_Internal_SetValuePhS_S__param_0,
	.param .b64 _Z30System_Array_Internal_SetValuePhS_S__param_1,
	.param .b64 _Z30System_Array_Internal_SetValuePhS_S__param_2
)
{
	.reg .pred 	%p<14>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<44>;


	ld.param.u64 	%rd18, [_Z30System_Array_Internal_SetValuePhS_S__param_0];
	ld.param.u64 	%rd19, [_Z30System_Array_Internal_SetValuePhS_S__param_1];
	ld.param.u64 	%rd4, [_Z30System_Array_Internal_SetValuePhS_S__param_2];
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd18;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd20, [retval0+0];
	
	//{
	}// Callseq End 3
	ld.u64 	%rd1, [%rd19];
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd1;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd2, [retval0+0];
	
	//{
	}// Callseq End 4
	ld.u64 	%rd21, [%rd20+168];
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd21;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd2;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z21Type_IsAssignableFromP12tMD_TypeDef_S0_, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r3, [retval0+0];
	
	//{
	}// Callseq End 5
	add.s64 	%rd3, %rd21, 54;
	setp.ne.s32	%p1, %r3, 0;
	@%p1 bra 	BB7_4;

	ld.global.u64 	%rd22, [types];
	ld.u64 	%rd23, [%rd22+368];
	ld.u64 	%rd24, [%rd3+98];
	setp.ne.s64	%p2, %rd24, %rd23;
	@%p2 bra 	BB7_3;

	ld.u64 	%rd25, [%rd3+106];
	ld.u64 	%rd26, [%rd25];
	setp.eq.s64	%p3, %rd26, %rd2;
	@%p3 bra 	BB7_4;

BB7_3:
	mov.u32 	%r4, 0;
	st.u32 	[%rd4], %r4;
	bra.uni 	BB7_17;

BB7_4:
	ld.u32 	%r5, [%rd18];
	ld.u32 	%r1, [%rd19+4];
	setp.lt.u32	%p4, %r1, %r5;
	@%p4 bra 	BB7_6;
	bra.uni 	BB7_5;

BB7_6:
	ld.u32 	%r2, [%rd3+58];
	cvt.u64.u32	%rd5, %r2;
	mul.lo.s32 	%r6, %r2, %r1;
	cvt.u64.u32	%rd6, %r6;
	add.s64 	%rd27, %rd6, %rd18;
	add.s64 	%rd7, %rd27, 4;
	ld.u8 	%rs1, [%rd3];
	setp.eq.s16	%p5, %rs1, 0;
	@%p5 bra 	BB7_15;

	ld.global.u64 	%rd28, [types];
	ld.u64 	%rd29, [%rd28+368];
	ld.u64 	%rd30, [%rd3+98];
	setp.eq.s64	%p6, %rd30, %rd29;
	@%p6 bra 	BB7_10;

	mov.u64 	%rd41, 0;
	setp.eq.s32	%p7, %r2, 0;
	@%p7 bra 	BB7_16;

BB7_9:
	add.s64 	%rd32, %rd1, %rd41;
	ld.u8 	%rs2, [%rd32];
	add.s64 	%rd33, %rd7, %rd41;
	st.u8 	[%rd33], %rs2;
	add.s64 	%rd41, %rd41, 1;
	setp.lt.u64	%p8, %rd41, %rd5;
	@%p8 bra 	BB7_9;
	bra.uni 	BB7_16;

BB7_15:
	st.u64 	[%rd7], %rd1;

BB7_16:
	mov.u32 	%r10, 1;
	st.u32 	[%rd4], %r10;

BB7_17:
	mov.u64 	%rd40, 0;
	st.param.b64	[func_retval0+0], %rd40;
	ret;

BB7_10:
	setp.eq.s64	%p9, %rd1, 0;
	@%p9 bra 	BB7_13;

	cvt.u32.u64	%r7, %rd5;
	mov.u32 	%r8, 1;
	st.u32 	[%rd7], %r8;
	add.s64 	%rd12, %rd27, 8;
	add.s32 	%r9, %r7, -4;
	cvt.u64.u32	%rd13, %r9;
	mov.u64 	%rd42, 0;
	setp.eq.s32	%p10, %r9, 0;
	@%p10 bra 	BB7_16;

BB7_12:
	add.s64 	%rd36, %rd1, %rd42;
	ld.u8 	%rs3, [%rd36];
	add.s64 	%rd37, %rd12, %rd42;
	st.u8 	[%rd37], %rs3;
	add.s64 	%rd42, %rd42, 1;
	setp.lt.u64	%p11, %rd42, %rd13;
	@%p11 bra 	BB7_12;
	bra.uni 	BB7_16;

BB7_13:
	mov.u64 	%rd43, 0;
	setp.eq.s64	%p12, %rd5, 0;
	@%p12 bra 	BB7_16;

BB7_14:
	add.s64 	%rd39, %rd7, %rd43;
	mov.u16 	%rs4, 0;
	st.u8 	[%rd39], %rs4;
	add.s64 	%rd43, %rd43, 1;
	setp.lt.u64	%p13, %rd43, %rd5;
	@%p13 bra 	BB7_14;
	bra.uni 	BB7_16;

BB7_5:
	trap;
}

	// .globl	_Z18System_Array_ClearPhS_S_
.visible .func  (.param .b64 func_retval0) _Z18System_Array_ClearPhS_S_(
	.param .b64 _Z18System_Array_ClearPhS_S__param_0,
	.param .b64 _Z18System_Array_ClearPhS_S__param_1,
	.param .b64 _Z18System_Array_ClearPhS_S__param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd6, [_Z18System_Array_ClearPhS_S__param_1];
	ld.u64 	%rd7, [%rd6];
	ld.u32 	%r1, [%rd6+4];
	ld.u32 	%r2, [%rd6+8];
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd8, [retval0+0];
	
	//{
	}// Callseq End 6
	ld.u64 	%rd9, [%rd8+168];
	ld.u32 	%r3, [%rd9+112];
	mul.lo.s32 	%r4, %r3, %r1;
	cvt.u64.u32	%rd10, %r4;
	add.s64 	%rd11, %rd7, %rd10;
	add.s64 	%rd1, %rd11, 4;
	mul.lo.s32 	%r5, %r3, %r2;
	cvt.u64.u32	%rd2, %r5;
	mov.u64 	%rd14, 0;
	setp.eq.s32	%p1, %r5, 0;
	@%p1 bra 	BB8_2;

BB8_1:
	add.s64 	%rd12, %rd1, %rd14;
	mov.u16 	%rs1, 0;
	st.u8 	[%rd12], %rs1;
	add.s64 	%rd14, %rd14, 1;
	setp.lt.u64	%p2, %rd14, %rd2;
	@%p2 bra 	BB8_1;

BB8_2:
	mov.u64 	%rd13, 0;
	st.param.b64	[func_retval0+0], %rd13;
	ret;
}

	// .globl	_Z26System_Array_Internal_CopyPhS_S_
.visible .func  (.param .b64 func_retval0) _Z26System_Array_Internal_CopyPhS_S_(
	.param .b64 _Z26System_Array_Internal_CopyPhS_S__param_0,
	.param .b64 _Z26System_Array_Internal_CopyPhS_S__param_1,
	.param .b64 _Z26System_Array_Internal_CopyPhS_S__param_2
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd10, [_Z26System_Array_Internal_CopyPhS_S__param_1];
	ld.param.u64 	%rd4, [_Z26System_Array_Internal_CopyPhS_S__param_2];
	ld.u64 	%rd1, [%rd10+16];
	ld.u64 	%rd2, [%rd10];
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd11, [retval0+0];
	
	//{
	}// Callseq End 7
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd1;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd12, [retval0+0];
	
	//{
	}// Callseq End 8
	ld.u64 	%rd3, [%rd11+168];
	ld.u64 	%rd13, [%rd12+168];
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z21Type_IsAssignableFromP12tMD_TypeDef_S0_, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r4, [retval0+0];
	
	//{
	}// Callseq End 9
	setp.eq.s32	%p1, %r4, 0;
	@%p1 bra 	BB9_7;

	ld.u32 	%r1, [%rd10+12];
	ld.u32 	%r2, [%rd10+16];
	ld.u32 	%r3, [%rd10+4];
	add.s32 	%r5, %r2, %r3;
	ld.u32 	%r6, [%rd2];
	setp.gt.u32	%p2, %r5, %r6;
	@%p2 bra 	BB9_6;

	add.s32 	%r7, %r2, %r1;
	ld.u32 	%r8, [%rd1];
	setp.gt.u32	%p3, %r7, %r8;
	@%p3 bra 	BB9_6;

	ld.u32 	%r9, [%rd3+112];
	mul.lo.s32 	%r10, %r9, %r1;
	cvt.u64.u32	%rd15, %r10;
	add.s64 	%rd16, %rd1, %rd15;
	add.s64 	%rd5, %rd16, 4;
	mul.lo.s32 	%r11, %r9, %r3;
	cvt.u64.u32	%rd17, %r11;
	add.s64 	%rd18, %rd2, %rd17;
	add.s64 	%rd6, %rd18, 4;
	mul.lo.s32 	%r12, %r9, %r2;
	cvt.u64.u32	%rd7, %r12;
	mov.u64 	%rd22, 0;
	setp.eq.s32	%p4, %r12, 0;
	@%p4 bra 	BB9_5;

BB9_4:
	add.s64 	%rd19, %rd6, %rd22;
	ld.u8 	%rs1, [%rd19];
	add.s64 	%rd20, %rd5, %rd22;
	st.u8 	[%rd20], %rs1;
	add.s64 	%rd22, %rd22, 1;
	setp.lt.u64	%p5, %rd22, %rd7;
	@%p5 bra 	BB9_4;

BB9_5:
	mov.u32 	%r13, 1;
	st.u32 	[%rd4], %r13;
	bra.uni 	BB9_8;

BB9_7:
	mov.u32 	%r14, 0;
	st.u32 	[%rd4], %r14;

BB9_8:
	mov.u64 	%rd21, 0;
	st.param.b64	[func_retval0+0], %rd21;
	ret;

BB9_6:
	trap;
}

	// .globl	_Z19System_Array_ResizePhS_S_
.visible .func  (.param .b64 func_retval0) _Z19System_Array_ResizePhS_S_(
	.param .b64 _Z19System_Array_ResizePhS_S__param_0,
	.param .b64 _Z19System_Array_ResizePhS_S__param_1,
	.param .b64 _Z19System_Array_ResizePhS_S__param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd8, [_Z19System_Array_ResizePhS_S__param_1];
	ld.u64 	%rd1, [%rd8];
	ld.u64 	%rd2, [%rd1];
	ld.u32 	%r1, [%rd2];
	ld.u32 	%r2, [%rd8+4];
	setp.eq.s32	%p1, %r1, %r2;
	@%p1 bra 	BB10_3;

	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd10, [retval0+0];
	
	//{
	}// Callseq End 10
	ld.u64 	%rd11, [%rd10+168];
	ld.u32 	%r3, [%rd11+112];
	mad.lo.s32 	%r4, %r3, %r2, 4;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b32 param1;
	st.param.b32	[param1+0], %r4;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z10Heap_AllocP12tMD_TypeDef_j, 
	(
	param0, 
	param1
	);
	ld.param.b64	%rd12, [retval0+0];
	
	//{
	}// Callseq End 11
	st.u32 	[%rd12], %r2;
	st.u64 	[%rd1], %rd12;
	add.s64 	%rd3, %rd12, 4;
	ld.u64 	%rd13, [%rd10+168];
	min.u32 	%r5, %r2, %r1;
	ld.u32 	%r6, [%rd13+112];
	mul.lo.s32 	%r7, %r6, %r5;
	cvt.u64.u32	%rd4, %r7;
	add.s64 	%rd5, %rd2, 4;
	mov.u64 	%rd17, 0;
	setp.eq.s32	%p2, %r7, 0;
	@%p2 bra 	BB10_3;

BB10_2:
	add.s64 	%rd14, %rd5, %rd17;
	ld.u8 	%rs1, [%rd14];
	add.s64 	%rd15, %rd3, %rd17;
	st.u8 	[%rd15], %rs1;
	add.s64 	%rd17, %rd17, 1;
	setp.lt.u64	%p3, %rd17, %rd4;
	@%p3 bra 	BB10_2;

BB10_3:
	mov.u64 	%rd16, 0;
	st.param.b64	[func_retval0+0], %rd16;
	ret;
}

	// .globl	_Z21SystemArray_NewVectorP12tMD_TypeDef_j
.visible .func  (.param .b64 func_retval0) _Z21SystemArray_NewVectorP12tMD_TypeDef_j(
	.param .b64 _Z21SystemArray_NewVectorP12tMD_TypeDef_j_param_0,
	.param .b32 _Z21SystemArray_NewVectorP12tMD_TypeDef_j_param_1
)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<4>;


	ld.param.u64 	%rd1, [_Z21SystemArray_NewVectorP12tMD_TypeDef_j_param_0];
	ld.param.u32 	%r1, [_Z21SystemArray_NewVectorP12tMD_TypeDef_j_param_1];
	ld.u64 	%rd2, [%rd1+168];
	ld.u32 	%r2, [%rd2+112];
	mad.lo.s32 	%r3, %r2, %r1, 4;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd1;
	.param .b32 param1;
	st.param.b32	[param1+0], %r3;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z10Heap_AllocP12tMD_TypeDef_j, 
	(
	param0, 
	param1
	);
	ld.param.b64	%rd3, [retval0+0];
	
	//{
	}// Callseq End 12
	st.u32 	[%rd3], %r1;
	st.param.b64	[func_retval0+0], %rd3;
	ret;
}

	// .globl	_Z20System_Array_ReversePhS_S_
.visible .func  (.param .b64 func_retval0) _Z20System_Array_ReversePhS_S_(
	.param .b64 _Z20System_Array_ReversePhS_S__param_0,
	.param .b64 _Z20System_Array_ReversePhS_S__param_1,
	.param .b64 _Z20System_Array_ReversePhS_S__param_2
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<15>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<53>;


	ld.param.u64 	%rd28, [_Z20System_Array_ReversePhS_S__param_1];
	ld.u32 	%r10, [%rd28+4];
	ld.u32 	%r11, [%rd28+8];
	ld.u64 	%rd29, [%rd28];
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd29;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd30, [retval0+0];
	
	//{
	}// Callseq End 13
	ld.u64 	%rd31, [%rd30+168];
	ld.u32 	%r1, [%rd31+112];
	mul.lo.s32 	%r12, %r1, %r10;
	cvt.u64.u32	%rd32, %r12;
	add.s64 	%rd33, %rd29, 4;
	add.s64 	%rd52, %rd33, %rd32;
	add.s32 	%r13, %r10, %r11;
	add.s32 	%r14, %r13, -1;
	mul.lo.s32 	%r15, %r1, %r14;
	cvt.u64.u32	%rd34, %r15;
	add.s64 	%rd3, %rd33, %rd34;
	setp.le.u32	%p1, %r15, %r12;
	@%p1 bra 	BB12_15;

BB12_1:
	setp.eq.s32	%p2, %r1, 0;
	@%p2 bra 	BB12_2;
	bra.uni 	BB12_3;

BB12_2:
	mov.u64 	%rd51, %rd3;
	bra.uni 	BB12_14;

BB12_3:
	and.b32  	%r16, %r1, 3;
	setp.eq.s32	%p3, %r16, 0;
	mov.u64 	%rd45, 0;
	@%p3 bra 	BB12_4;
	bra.uni 	BB12_5;

BB12_4:
	mov.u64 	%rd51, %rd45;
	mov.u64 	%rd50, %rd52;
	mov.u32 	%r23, %r1;
	bra.uni 	BB12_12;

BB12_5:
	setp.eq.s32	%p4, %r16, 1;
	@%p4 bra 	BB12_6;
	bra.uni 	BB12_7;

BB12_6:
	mov.u32 	%r21, %r1;
	bra.uni 	BB12_11;

BB12_7:
	setp.eq.s32	%p5, %r16, 2;
	@%p5 bra 	BB12_8;
	bra.uni 	BB12_9;

BB12_8:
	mov.u32 	%r20, %r1;
	bra.uni 	BB12_10;

BB12_9:
	ld.u8 	%rs1, [%rd52];
	ld.u8 	%rs2, [%rd3];
	st.u8 	[%rd52], %rs2;
	st.u8 	[%rd3], %rs1;
	add.s64 	%rd3, %rd3, 1;
	add.s64 	%rd52, %rd52, 1;
	add.s32 	%r20, %r1, -1;

BB12_10:
	ld.u8 	%rs3, [%rd52];
	ld.u8 	%rs4, [%rd3];
	st.u8 	[%rd52], %rs4;
	st.u8 	[%rd3], %rs3;
	add.s64 	%rd3, %rd3, 1;
	add.s64 	%rd52, %rd52, 1;
	add.s32 	%r21, %r20, -1;

BB12_11:
	ld.u8 	%rs5, [%rd52];
	ld.u8 	%rs6, [%rd3];
	st.u8 	[%rd52], %rs6;
	st.u8 	[%rd3], %rs5;
	add.s64 	%rd51, %rd3, 1;
	add.s64 	%rd45, %rd52, 1;
	add.s32 	%r23, %r21, -1;
	mov.u64 	%rd3, %rd51;
	mov.u64 	%rd50, %rd45;

BB12_12:
	setp.lt.u32	%p6, %r1, 4;
	mov.u64 	%rd52, %rd45;
	@%p6 bra 	BB12_14;

BB12_13:
	ld.u8 	%rs7, [%rd50];
	ld.u8 	%rs8, [%rd3];
	st.u8 	[%rd50], %rs8;
	st.u8 	[%rd3], %rs7;
	ld.u8 	%rs9, [%rd50+1];
	ld.u8 	%rs10, [%rd3+1];
	st.u8 	[%rd50+1], %rs10;
	st.u8 	[%rd3+1], %rs9;
	ld.u8 	%rs11, [%rd50+2];
	ld.u8 	%rs12, [%rd3+2];
	st.u8 	[%rd50+2], %rs12;
	st.u8 	[%rd3+2], %rs11;
	ld.u8 	%rs13, [%rd50+3];
	ld.u8 	%rs14, [%rd3+3];
	st.u8 	[%rd50+3], %rs14;
	st.u8 	[%rd3+3], %rs13;
	add.s64 	%rd3, %rd3, 4;
	add.s64 	%rd50, %rd50, 4;
	add.s32 	%r23, %r23, -4;
	setp.ne.s32	%p7, %r23, 0;
	mov.u64 	%rd51, %rd3;
	mov.u64 	%rd52, %rd50;
	@%p7 bra 	BB12_13;

BB12_14:
	shl.b32 	%r19, %r1, 1;
	cvt.u64.u32	%rd37, %r19;
	sub.s64 	%rd3, %rd51, %rd37;
	setp.gt.u64	%p8, %rd3, %rd52;
	@%p8 bra 	BB12_1;

BB12_15:
	mov.u64 	%rd38, 0;
	st.param.b64	[func_retval0+0], %rd38;
	ret;
}

	// .globl	_Z24SystemArray_StoreElementPhjS_
.visible .func _Z24SystemArray_StoreElementPhjS_(
	.param .b64 _Z24SystemArray_StoreElementPhjS__param_0,
	.param .b32 _Z24SystemArray_StoreElementPhjS__param_1,
	.param .b64 _Z24SystemArray_StoreElementPhjS__param_2
)
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd6, [_Z24SystemArray_StoreElementPhjS__param_0];
	ld.param.u32 	%r2, [_Z24SystemArray_StoreElementPhjS__param_1];
	ld.param.u64 	%rd7, [_Z24SystemArray_StoreElementPhjS__param_2];
	ld.u32 	%r3, [%rd6];
	setp.gt.u32	%p1, %r3, %r2;
	@%p1 bra 	BB13_2;
	bra.uni 	BB13_1;

BB13_2:
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd8, [retval0+0];
	
	//{
	}// Callseq End 14
	ld.u64 	%rd9, [%rd8+168];
	ld.u32 	%r1, [%rd9+112];
	cvt.u64.u32	%rd1, %r2;
	setp.eq.s32	%p2, %r1, 1;
	@%p2 bra 	BB13_7;

	setp.eq.s32	%p3, %r1, 2;
	@%p3 bra 	BB13_6;
	bra.uni 	BB13_4;

BB13_6:
	ld.u16 	%rs1, [%rd7];
	shl.b64 	%rd12, %rd1, 1;
	add.s64 	%rd13, %rd6, %rd12;
	st.u16 	[%rd13+4], %rs1;
	bra.uni 	BB13_10;

BB13_7:
	ld.u8 	%rs2, [%rd7];
	add.s64 	%rd14, %rd6, %rd1;
	st.u8 	[%rd14+4], %rs2;
	bra.uni 	BB13_10;

BB13_4:
	setp.ne.s32	%p4, %r1, 4;
	@%p4 bra 	BB13_8;

	ld.u32 	%r4, [%rd7];
	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd6, %rd10;
	st.u32 	[%rd11+4], %r4;
	bra.uni 	BB13_10;

BB13_8:
	cvt.u64.u32	%rd2, %r1;
	mul.lo.s32 	%r5, %r1, %r2;
	cvt.u64.u32	%rd16, %r5;
	add.s64 	%rd17, %rd16, %rd6;
	add.s64 	%rd3, %rd17, 4;
	mov.u64 	%rd20, 0;
	setp.eq.s32	%p5, %r1, 0;
	@%p5 bra 	BB13_10;

BB13_9:
	add.s64 	%rd18, %rd7, %rd20;
	ld.u8 	%rs3, [%rd18];
	add.s64 	%rd19, %rd3, %rd20;
	st.u8 	[%rd19], %rs3;
	add.s64 	%rd20, %rd20, 1;
	setp.lt.u64	%p6, %rd20, %rd2;
	@%p6 bra 	BB13_9;

BB13_10:
	ret;

BB13_1:
	trap;
}

	// .globl	_Z23SystemArray_LoadElementPhjS_
.visible .func _Z23SystemArray_LoadElementPhjS_(
	.param .b64 _Z23SystemArray_LoadElementPhjS__param_0,
	.param .b32 _Z23SystemArray_LoadElementPhjS__param_1,
	.param .b64 _Z23SystemArray_LoadElementPhjS__param_2
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<4>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd6, [_Z23SystemArray_LoadElementPhjS__param_0];
	ld.param.u32 	%r2, [_Z23SystemArray_LoadElementPhjS__param_1];
	ld.param.u64 	%rd7, [_Z23SystemArray_LoadElementPhjS__param_2];
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd8, [retval0+0];
	
	//{
	}// Callseq End 15
	ld.u64 	%rd9, [%rd8+168];
	ld.u32 	%r1, [%rd9+112];
	cvt.u64.u32	%rd1, %r2;
	setp.eq.s32	%p1, %r1, 1;
	@%p1 bra 	BB14_5;

	setp.eq.s32	%p2, %r1, 2;
	@%p2 bra 	BB14_4;
	bra.uni 	BB14_2;

BB14_4:
	shl.b64 	%rd12, %rd1, 1;
	add.s64 	%rd13, %rd6, %rd12;
	ld.u16 	%rs1, [%rd13+4];
	st.u16 	[%rd7], %rs1;
	bra.uni 	BB14_8;

BB14_5:
	add.s64 	%rd14, %rd6, %rd1;
	ld.u8 	%rs2, [%rd14+4];
	st.u8 	[%rd7], %rs2;
	bra.uni 	BB14_8;

BB14_2:
	setp.ne.s32	%p3, %r1, 4;
	@%p3 bra 	BB14_6;

	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd6, %rd10;
	ld.u32 	%r3, [%rd11+4];
	st.u32 	[%rd7], %r3;
	bra.uni 	BB14_8;

BB14_6:
	cvt.u64.u32	%rd2, %r1;
	mul.lo.s32 	%r4, %r1, %r2;
	cvt.u64.u32	%rd16, %r4;
	add.s64 	%rd17, %rd16, %rd6;
	add.s64 	%rd3, %rd17, 4;
	mov.u64 	%rd20, 0;
	setp.eq.s32	%p4, %r1, 0;
	@%p4 bra 	BB14_8;

BB14_7:
	add.s64 	%rd18, %rd3, %rd20;
	ld.u8 	%rs3, [%rd18];
	add.s64 	%rd19, %rd7, %rd20;
	st.u8 	[%rd19], %rs3;
	add.s64 	%rd20, %rd20, 1;
	setp.lt.u64	%p5, %rd20, %rd2;
	@%p5 bra 	BB14_7;

BB14_8:
	ret;
}

	// .globl	_Z30SystemArray_LoadElementAddressPhj
.visible .func  (.param .b64 func_retval0) _Z30SystemArray_LoadElementAddressPhj(
	.param .b64 _Z30SystemArray_LoadElementAddressPhj_param_0,
	.param .b32 _Z30SystemArray_LoadElementAddressPhj_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd1, [_Z30SystemArray_LoadElementAddressPhj_param_0];
	ld.param.u32 	%r1, [_Z30SystemArray_LoadElementAddressPhj_param_1];
	ld.u32 	%r2, [%rd1];
	setp.gt.u32	%p1, %r2, %r1;
	@%p1 bra 	BB15_2;
	bra.uni 	BB15_1;

BB15_2:
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd1;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z12Heap_GetTypePh, 
	(
	param0
	);
	ld.param.b64	%rd2, [retval0+0];
	
	//{
	}// Callseq End 16
	ld.u64 	%rd3, [%rd2+168];
	ld.u32 	%r3, [%rd3+112];
	mul.lo.s32 	%r4, %r3, %r1;
	cvt.u64.u32	%rd4, %r4;
	add.s64 	%rd5, %rd4, %rd1;
	add.s64 	%rd6, %rd5, 4;
	st.param.b64	[func_retval0+0], %rd6;
	ret;

BB15_1:
	trap;
}

	// .globl	_Z23SystemArray_GetNumBytesPhP12tMD_TypeDef_
.visible .func  (.param .b32 func_retval0) _Z23SystemArray_GetNumBytesPhP12tMD_TypeDef_(
	.param .b64 _Z23SystemArray_GetNumBytesPhP12tMD_TypeDef__param_0,
	.param .b64 _Z23SystemArray_GetNumBytesPhP12tMD_TypeDef__param_1
)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z23SystemArray_GetNumBytesPhP12tMD_TypeDef__param_0];
	ld.param.u64 	%rd2, [_Z23SystemArray_GetNumBytesPhP12tMD_TypeDef__param_1];
	ld.u32 	%r1, [%rd1];
	ld.u32 	%r2, [%rd2+112];
	mad.lo.s32 	%r3, %r2, %r1, 4;
	st.param.b32	[func_retval0+0], %r3;
	ret;
}


