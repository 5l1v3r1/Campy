//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-22781540
// Cuda compilation tools, release 9.0, V9.0.176
// Based on LLVM 3.4svn
//

.version 6.0
.target sm_35
.address_size 64

	// .weak	cudaMalloc
.extern .func  (.param .b64 func_retval0) malloc
(
	.param .b64 malloc_param_0
)
;
.extern .func free
(
	.param .b64 free_param_0
)
;

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z7gpuexiti
.visible .func _Z7gpuexiti(
	.param .b32 _Z7gpuexiti_param_0
)
{



	ret;
}

	// .globl	_Z7GstrlenPKc
.visible .func  (.param .b64 func_retval0) _Z7GstrlenPKc(
	.param .b64 _Z7GstrlenPKc_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd4, [_Z7GstrlenPKc_param_0];
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, %rd8;

BB7_1:
	mov.u64 	%rd1, %rd9;
	mov.u64 	%rd9, %rd8;
	add.s64 	%rd7, %rd4, %rd9;
	ld.u8 	%rs1, [%rd7];
	add.s64 	%rd8, %rd9, 1;
	setp.ne.s16	%p1, %rs1, 0;
	@%p1 bra 	BB7_1;

	st.param.b64	[func_retval0+0], %rd1;
	ret;
}

	// .globl	_Z8GreallocPvy
.visible .func  (.param .b64 func_retval0) _Z8GreallocPvy(
	.param .b64 _Z8GreallocPvy_param_0,
	.param .b64 _Z8GreallocPvy_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd4, [_Z8GreallocPvy_param_0];
	ld.param.u64 	%rd5, [_Z8GreallocPvy_param_1];
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	malloc, 
	(
	param0
	);
	ld.param.b64	%rd1, [retval0+0];
	
	//{
	}// Callseq End 0
	mov.u64 	%rd9, 0;
	setp.eq.s64	%p1, %rd5, 0;
	@%p1 bra 	BB8_2;

BB8_1:
	add.s64 	%rd7, %rd4, %rd9;
	ld.u8 	%rs1, [%rd7];
	add.s64 	%rd8, %rd1, %rd9;
	st.u8 	[%rd8], %rs1;
	add.s64 	%rd9, %rd9, 1;
	setp.lt.u64	%p2, %rd9, %rd5;
	@%p2 bra 	BB8_1;

BB8_2:
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	call.uni 
	free, 
	(
	param0
	);
	
	//{
	}// Callseq End 1
	st.param.b64	[func_retval0+0], %rd1;
	ret;
}

	// .globl	_Z7Gmallocy
.visible .func  (.param .b64 func_retval0) _Z7Gmallocy(
	.param .b64 _Z7Gmallocy_param_0
)
{
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z7Gmallocy_param_0];
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd1;
	.param .b64 retval0;
	call.uni (retval0), 
	malloc, 
	(
	param0
	);
	ld.param.b64	%rd2, [retval0+0];
	
	//{
	}// Callseq End 2
	st.param.b64	[func_retval0+0], %rd2;
	ret;
}


