//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-22781540
// Cuda compilation tools, release 9.0, V9.0.176
// Based on LLVM 3.4svn
//

.version 6.0
.target sm_30
.address_size 64

	// .globl	_Z15System_Math_SinPhS_S_
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.func  (.param .b64 func_retval0) __internal_accurate_pow
(
	.param .b64 __internal_accurate_pow_param_0,
	.param .b64 __internal_accurate_pow_param_1
)
;
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.const .align 8 .b8 __cudart_sin_cos_coeffs[128] = {186, 94, 120, 249, 101, 219, 229, 61, 70, 210, 176, 44, 241, 229, 90, 190, 146, 227, 172, 105, 227, 29, 199, 62, 161, 98, 219, 25, 160, 1, 42, 191, 24, 8, 17, 17, 17, 17, 129, 63, 84, 85, 85, 85, 85, 85, 197, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 129, 253, 32, 131, 255, 168, 189, 40, 133, 239, 193, 167, 238, 33, 62, 217, 230, 6, 142, 79, 126, 146, 190, 233, 188, 221, 25, 160, 1, 250, 62, 71, 93, 193, 22, 108, 193, 86, 191, 81, 85, 85, 85, 85, 85, 165, 63, 0, 0, 0, 0, 0, 0, 224, 191, 0, 0, 0, 0, 0, 0, 240, 63};

.visible .func  (.param .b64 func_retval0) _Z15System_Math_SinPhS_S_(
	.param .b64 _Z15System_Math_SinPhS_S__param_0,
	.param .b64 _Z15System_Math_SinPhS_S__param_1,
	.param .b64 _Z15System_Math_SinPhS_S__param_2
)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<6>;
	.reg .b32 	%r<14>;
	.reg .f64 	%fd<42>;
	.reg .b64 	%rd<11>;


	mov.u64 	%rd10, __local_depot0;
	cvta.local.u64 	%SP, %rd10;
	ld.param.u64 	%rd3, [_Z15System_Math_SinPhS_S__param_1];
	ld.param.u64 	%rd2, [_Z15System_Math_SinPhS_S__param_2];
	add.u64 	%rd4, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd4;
	ld.f64 	%fd38, [%rd3];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r4}, %fd38;
	}
	and.b32  	%r5, %r4, 2147483647;
	setp.ne.s32	%p1, %r5, 2146435072;
	@%p1 bra 	BB0_3;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r6, %temp}, %fd38;
	}
	setp.ne.s32	%p2, %r6, 0;
	@%p2 bra 	BB0_3;

	mov.f64 	%fd14, 0d0000000000000000;
	mul.rn.f64 	%fd38, %fd38, %fd14;

BB0_3:
	mul.f64 	%fd15, %fd38, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r13, %fd15;
	st.local.u32 	[%rd1], %r13;
	cvt.rn.f64.s32	%fd16, %r13;
	neg.f64 	%fd17, %fd16;
	mov.f64 	%fd18, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd19, %fd17, %fd18, %fd38;
	mov.f64 	%fd20, 0d3C91A62633145C00;
	fma.rn.f64 	%fd21, %fd17, %fd20, %fd19;
	mov.f64 	%fd22, 0d397B839A252049C0;
	fma.rn.f64 	%fd39, %fd17, %fd22, %fd21;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r7}, %fd38;
	}
	and.b32  	%r8, %r7, 2145386496;
	setp.lt.u32	%p3, %r8, 1105199104;
	@%p3 bra 	BB0_5;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd38;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd4;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd39, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.local.u32 	%r13, [%rd1];

BB0_5:
	and.b32  	%r9, %r13, 1;
	shl.b32 	%r10, %r9, 3;
	setp.eq.s32	%p4, %r9, 0;
	selp.f64	%fd23, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p4;
	add.s32 	%r11, %r10, 1;
	mul.wide.s32 	%rd6, %r11, 8;
	mov.u64 	%rd7, __cudart_sin_cos_coeffs;
	add.s64 	%rd8, %rd7, %rd6;
	ld.const.f64 	%fd24, [%rd8];
	mul.rn.f64 	%fd7, %fd39, %fd39;
	fma.rn.f64 	%fd25, %fd23, %fd7, %fd24;
	ld.const.f64 	%fd26, [%rd8+8];
	fma.rn.f64 	%fd27, %fd25, %fd7, %fd26;
	ld.const.f64 	%fd28, [%rd8+16];
	fma.rn.f64 	%fd29, %fd27, %fd7, %fd28;
	ld.const.f64 	%fd30, [%rd8+24];
	fma.rn.f64 	%fd31, %fd29, %fd7, %fd30;
	ld.const.f64 	%fd32, [%rd8+32];
	fma.rn.f64 	%fd33, %fd31, %fd7, %fd32;
	ld.const.f64 	%fd34, [%rd8+40];
	fma.rn.f64 	%fd8, %fd33, %fd7, %fd34;
	fma.rn.f64 	%fd40, %fd8, %fd39, %fd39;
	@%p4 bra 	BB0_7;

	mov.f64 	%fd35, 0d3FF0000000000000;
	fma.rn.f64 	%fd40, %fd8, %fd7, %fd35;

BB0_7:
	and.b32  	%r12, %r13, 2;
	setp.eq.s32	%p5, %r12, 0;
	@%p5 bra 	BB0_9;

	mov.f64 	%fd36, 0d0000000000000000;
	mov.f64 	%fd37, 0dBFF0000000000000;
	fma.rn.f64 	%fd40, %fd40, %fd37, %fd36;

BB0_9:
	st.f64 	[%rd2], %fd40;
	mov.u64 	%rd9, 0;
	st.param.b64	[func_retval0+0], %rd9;
	ret;
}

	// .globl	_Z15System_Math_CosPhS_S_
.visible .func  (.param .b64 func_retval0) _Z15System_Math_CosPhS_S_(
	.param .b64 _Z15System_Math_CosPhS_S__param_0,
	.param .b64 _Z15System_Math_CosPhS_S__param_1,
	.param .b64 _Z15System_Math_CosPhS_S__param_2
)
{
	.local .align 4 .b8 	__local_depot1[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<6>;
	.reg .b32 	%r<15>;
	.reg .f64 	%fd<42>;
	.reg .b64 	%rd<11>;


	mov.u64 	%rd10, __local_depot1;
	cvta.local.u64 	%SP, %rd10;
	ld.param.u64 	%rd3, [_Z15System_Math_CosPhS_S__param_1];
	ld.param.u64 	%rd2, [_Z15System_Math_CosPhS_S__param_2];
	add.u64 	%rd4, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd4;
	ld.f64 	%fd38, [%rd3];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r5}, %fd38;
	}
	and.b32  	%r6, %r5, 2147483647;
	setp.ne.s32	%p1, %r6, 2146435072;
	@%p1 bra 	BB1_3;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r7, %temp}, %fd38;
	}
	setp.ne.s32	%p2, %r7, 0;
	@%p2 bra 	BB1_3;

	mov.f64 	%fd14, 0d0000000000000000;
	mul.rn.f64 	%fd38, %fd38, %fd14;

BB1_3:
	mul.f64 	%fd15, %fd38, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r14, %fd15;
	st.local.u32 	[%rd1], %r14;
	cvt.rn.f64.s32	%fd16, %r14;
	neg.f64 	%fd17, %fd16;
	mov.f64 	%fd18, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd19, %fd17, %fd18, %fd38;
	mov.f64 	%fd20, 0d3C91A62633145C00;
	fma.rn.f64 	%fd21, %fd17, %fd20, %fd19;
	mov.f64 	%fd22, 0d397B839A252049C0;
	fma.rn.f64 	%fd39, %fd17, %fd22, %fd21;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd38;
	}
	and.b32  	%r9, %r8, 2145386496;
	setp.lt.u32	%p3, %r9, 1105199104;
	@%p3 bra 	BB1_5;

	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd38;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd4;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd39, [retval0+0];
	
	//{
	}// Callseq End 1
	ld.local.u32 	%r14, [%rd1];

BB1_5:
	add.s32 	%r4, %r14, 1;
	and.b32  	%r10, %r4, 1;
	shl.b32 	%r11, %r10, 3;
	setp.eq.s32	%p4, %r10, 0;
	selp.f64	%fd23, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p4;
	add.s32 	%r12, %r11, 1;
	mul.wide.s32 	%rd6, %r12, 8;
	mov.u64 	%rd7, __cudart_sin_cos_coeffs;
	add.s64 	%rd8, %rd7, %rd6;
	ld.const.f64 	%fd24, [%rd8];
	mul.rn.f64 	%fd7, %fd39, %fd39;
	fma.rn.f64 	%fd25, %fd23, %fd7, %fd24;
	ld.const.f64 	%fd26, [%rd8+8];
	fma.rn.f64 	%fd27, %fd25, %fd7, %fd26;
	ld.const.f64 	%fd28, [%rd8+16];
	fma.rn.f64 	%fd29, %fd27, %fd7, %fd28;
	ld.const.f64 	%fd30, [%rd8+24];
	fma.rn.f64 	%fd31, %fd29, %fd7, %fd30;
	ld.const.f64 	%fd32, [%rd8+32];
	fma.rn.f64 	%fd33, %fd31, %fd7, %fd32;
	ld.const.f64 	%fd34, [%rd8+40];
	fma.rn.f64 	%fd8, %fd33, %fd7, %fd34;
	fma.rn.f64 	%fd40, %fd8, %fd39, %fd39;
	@%p4 bra 	BB1_7;

	mov.f64 	%fd35, 0d3FF0000000000000;
	fma.rn.f64 	%fd40, %fd8, %fd7, %fd35;

BB1_7:
	and.b32  	%r13, %r4, 2;
	setp.eq.s32	%p5, %r13, 0;
	@%p5 bra 	BB1_9;

	mov.f64 	%fd36, 0d0000000000000000;
	mov.f64 	%fd37, 0dBFF0000000000000;
	fma.rn.f64 	%fd40, %fd40, %fd37, %fd36;

BB1_9:
	st.f64 	[%rd2], %fd40;
	mov.u64 	%rd9, 0;
	st.param.b64	[func_retval0+0], %rd9;
	ret;
}

	// .globl	_Z15System_Math_TanPhS_S_
.visible .func  (.param .b64 func_retval0) _Z15System_Math_TanPhS_S_(
	.param .b64 _Z15System_Math_TanPhS_S__param_0,
	.param .b64 _Z15System_Math_TanPhS_S__param_1,
	.param .b64 _Z15System_Math_TanPhS_S__param_2
)
{
	.local .align 4 .b8 	__local_depot2[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<5>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<65>;
	.reg .b64 	%rd<8>;


	mov.u64 	%rd7, __local_depot2;
	cvta.local.u64 	%SP, %rd7;
	ld.param.u64 	%rd3, [_Z15System_Math_TanPhS_S__param_1];
	ld.param.u64 	%rd2, [_Z15System_Math_TanPhS_S__param_2];
	add.u64 	%rd4, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd4;
	ld.f64 	%fd62, [%rd3];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r4}, %fd62;
	}
	and.b32  	%r5, %r4, 2147483647;
	setp.ne.s32	%p1, %r5, 2146435072;
	@%p1 bra 	BB2_3;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r6, %temp}, %fd62;
	}
	setp.ne.s32	%p2, %r6, 0;
	@%p2 bra 	BB2_3;

	mov.f64 	%fd11, 0d0000000000000000;
	mul.rn.f64 	%fd62, %fd62, %fd11;

BB2_3:
	mul.f64 	%fd12, %fd62, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r10, %fd12;
	st.local.u32 	[%rd1], %r10;
	cvt.rn.f64.s32	%fd13, %r10;
	neg.f64 	%fd14, %fd13;
	mov.f64 	%fd15, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd16, %fd14, %fd15, %fd62;
	mov.f64 	%fd17, 0d3C91A62633145C00;
	fma.rn.f64 	%fd18, %fd14, %fd17, %fd16;
	mov.f64 	%fd19, 0d397B839A252049C0;
	fma.rn.f64 	%fd63, %fd14, %fd19, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r7}, %fd62;
	}
	and.b32  	%r8, %r7, 2145386496;
	setp.lt.u32	%p3, %r8, 1105199104;
	@%p3 bra 	BB2_5;

	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd62;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd4;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd63, [retval0+0];
	
	//{
	}// Callseq End 2
	ld.local.u32 	%r10, [%rd1];

BB2_5:
	mul.f64 	%fd20, %fd63, %fd63;
	mov.f64 	%fd21, 0dBEF9757C5B27EBB1;
	mov.f64 	%fd22, 0d3EE48DAC2799BCB9;
	fma.rn.f64 	%fd23, %fd22, %fd20, %fd21;
	mov.f64 	%fd24, 0d3F0980E90FD91E04;
	fma.rn.f64 	%fd25, %fd23, %fd20, %fd24;
	mov.f64 	%fd26, 0dBEFAE2B0417D7E1D;
	fma.rn.f64 	%fd27, %fd25, %fd20, %fd26;
	mov.f64 	%fd28, 0d3F119F5341BFBA57;
	fma.rn.f64 	%fd29, %fd27, %fd20, %fd28;
	mov.f64 	%fd30, 0d3F15E791A00F6919;
	fma.rn.f64 	%fd31, %fd29, %fd20, %fd30;
	mov.f64 	%fd32, 0d3F2FF2E7FADEC73A;
	fma.rn.f64 	%fd33, %fd31, %fd20, %fd32;
	mov.f64 	%fd34, 0d3F434BC1B206DA62;
	fma.rn.f64 	%fd35, %fd33, %fd20, %fd34;
	mov.f64 	%fd36, 0d3F57DB18EF2F83F9;
	fma.rn.f64 	%fd37, %fd35, %fd20, %fd36;
	mov.f64 	%fd38, 0d3F6D6D2E7AE49FBC;
	fma.rn.f64 	%fd39, %fd37, %fd20, %fd38;
	mov.f64 	%fd40, 0d3F8226E3A816A776;
	fma.rn.f64 	%fd41, %fd39, %fd20, %fd40;
	mov.f64 	%fd42, 0d3F9664F485D25660;
	fma.rn.f64 	%fd43, %fd41, %fd20, %fd42;
	mov.f64 	%fd44, 0d3FABA1BA1BABF31D;
	fma.rn.f64 	%fd45, %fd43, %fd20, %fd44;
	mov.f64 	%fd46, 0d3FC11111111105D2;
	fma.rn.f64 	%fd47, %fd45, %fd20, %fd46;
	mov.f64 	%fd48, 0d3FD555555555555E;
	fma.rn.f64 	%fd49, %fd47, %fd20, %fd48;
	mul.f64 	%fd7, %fd20, %fd49;
	fma.rn.f64 	%fd64, %fd7, %fd63, %fd63;
	and.b32  	%r9, %r10, 1;
	setp.eq.b32	%p4, %r9, 1;
	@!%p4 bra 	BB2_7;
	bra.uni 	BB2_6;

BB2_6:
	sub.f64 	%fd50, %fd64, %fd63;
	neg.f64 	%fd51, %fd50;
	fma.rn.f64 	%fd52, %fd7, %fd63, %fd51;
	neg.f64 	%fd53, %fd64;
	rcp.approx.ftz.f64 	%fd54, %fd64;
	mov.f64 	%fd55, 0d3FF0000000000000;
	fma.rn.f64 	%fd56, %fd53, %fd54, %fd55;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd56;
	fma.rn.f64 	%fd58, %fd57, %fd54, %fd54;
	neg.f64 	%fd59, %fd58;
	fma.rn.f64 	%fd60, %fd64, %fd59, %fd55;
	fma.rn.f64 	%fd61, %fd59, %fd52, %fd60;
	fma.rn.f64 	%fd64, %fd61, %fd59, %fd59;

BB2_7:
	st.f64 	[%rd2], %fd64;
	mov.u64 	%rd6, 0;
	st.param.b64	[func_retval0+0], %rd6;
	ret;
}

	// .globl	_Z15System_Math_PowPhS_S_
.visible .func  (.param .b64 func_retval0) _Z15System_Math_PowPhS_S_(
	.param .b64 _Z15System_Math_PowPhS_S__param_0,
	.param .b64 _Z15System_Math_PowPhS_S__param_1,
	.param .b64 _Z15System_Math_PowPhS_S__param_2
)
{
	.reg .pred 	%p<22>;
	.reg .b32 	%r<29>;
	.reg .f64 	%fd<20>;
	.reg .b64 	%rd<6>;


	ld.param.u64 	%rd3, [_Z15System_Math_PowPhS_S__param_1];
	ld.param.u64 	%rd2, [_Z15System_Math_PowPhS_S__param_2];
	ld.f64 	%fd1, [%rd3];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd1;
	}
	ld.f64 	%fd2, [%rd3+8];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2}, %fd2;
	}
	bfe.u32 	%r3, %r2, 20, 11;
	add.s32 	%r4, %r3, -1012;
	mov.b64 	 %rd4, %fd2;
	shl.b64 	%rd1, %rd4, %r4;
	setp.eq.s64	%p2, %rd1, -9223372036854775808;
	abs.f64 	%fd3, %fd1;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd3;
	.param .b64 param1;
	st.param.f64	[param1+0], %fd2;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd9, [retval0+0];
	
	//{
	}// Callseq End 3
	setp.lt.s32	%p3, %r1, 0;
	and.pred  	%p1, %p3, %p2;
	@!%p1 bra 	BB3_2;
	bra.uni 	BB3_1;

BB3_1:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r5}, %fd9;
	}
	xor.b32  	%r6, %r5, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r7, %temp}, %fd9;
	}
	mov.b64 	%fd9, {%r7, %r6};

BB3_2:
	setp.eq.f64	%p4, %fd1, 0d0000000000000000;
	@%p4 bra 	BB3_5;
	bra.uni 	BB3_3;

BB3_5:
	selp.b32	%r8, %r1, 0, %p2;
	or.b32  	%r9, %r8, 2146435072;
	setp.lt.s32	%p8, %r2, 0;
	selp.b32	%r10, %r9, %r8, %p8;
	mov.u32 	%r11, 0;
	mov.b64 	%fd9, {%r11, %r10};
	bra.uni 	BB3_6;

BB3_3:
	setp.gt.s32	%p5, %r1, -1;
	@%p5 bra 	BB3_6;

	cvt.rzi.f64.f64	%fd14, %fd2;
	setp.neu.f64	%p6, %fd14, %fd2;
	selp.f64	%fd9, 0dFFF8000000000000, %fd9, %p6;

BB3_6:
	add.f64 	%fd19, %fd1, %fd2;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r12}, %fd19;
	}
	and.b32  	%r13, %r12, 2146435072;
	setp.ne.s32	%p9, %r13, 2146435072;
	@%p9 bra 	BB3_7;

	setp.gtu.f64	%p10, %fd3, 0d7FF0000000000000;
	@%p10 bra 	BB3_17;

	abs.f64 	%fd15, %fd2;
	setp.gtu.f64	%p11, %fd15, 0d7FF0000000000000;
	@%p11 bra 	BB3_17;

	and.b32  	%r14, %r2, 2147483647;
	setp.ne.s32	%p12, %r14, 2146435072;
	@%p12 bra 	BB3_12;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r15, %temp}, %fd2;
	}
	setp.eq.s32	%p13, %r15, 0;
	@%p13 bra 	BB3_16;

BB3_12:
	and.b32  	%r16, %r1, 2147483647;
	setp.ne.s32	%p14, %r16, 2146435072;
	@%p14 bra 	BB3_13;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r17, %temp}, %fd1;
	}
	setp.ne.s32	%p15, %r17, 0;
	mov.f64 	%fd19, %fd9;
	@%p15 bra 	BB3_17;

	shr.s32 	%r18, %r2, 31;
	and.b32  	%r19, %r18, -2146435072;
	add.s32 	%r20, %r19, 2146435072;
	or.b32  	%r21, %r20, -2147483648;
	selp.b32	%r22, %r21, %r20, %p1;
	mov.u32 	%r23, 0;
	mov.b64 	%fd19, {%r23, %r22};
	bra.uni 	BB3_17;

BB3_7:
	mov.f64 	%fd19, %fd9;

BB3_17:
	setp.eq.f64	%p19, %fd2, 0d0000000000000000;
	setp.eq.f64	%p20, %fd1, 0d3FF0000000000000;
	or.pred  	%p21, %p20, %p19;
	selp.f64	%fd16, 0d3FF0000000000000, %fd19, %p21;
	st.f64 	[%rd2], %fd16;
	mov.u64 	%rd5, 0;
	st.param.b64	[func_retval0+0], %rd5;
	ret;

BB3_13:
	mov.f64 	%fd19, %fd9;
	bra.uni 	BB3_17;

BB3_16:
	setp.gt.f64	%p16, %fd3, 0d3FF0000000000000;
	selp.b32	%r24, 2146435072, 0, %p16;
	xor.b32  	%r25, %r24, 2146435072;
	setp.lt.s32	%p17, %r2, 0;
	selp.b32	%r26, %r25, %r24, %p17;
	setp.eq.f64	%p18, %fd1, 0dBFF0000000000000;
	selp.b32	%r27, 1072693248, %r26, %p18;
	mov.u32 	%r28, 0;
	mov.b64 	%fd19, {%r28, %r27};
	bra.uni 	BB3_17;
}

	// .globl	_Z16System_Math_SqrtPhS_S_
.visible .func  (.param .b64 func_retval0) _Z16System_Math_SqrtPhS_S_(
	.param .b64 _Z16System_Math_SqrtPhS_S__param_0,
	.param .b64 _Z16System_Math_SqrtPhS_S__param_1,
	.param .b64 _Z16System_Math_SqrtPhS_S__param_2
)
{
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<4>;


	ld.param.u64 	%rd1, [_Z16System_Math_SqrtPhS_S__param_1];
	ld.param.u64 	%rd2, [_Z16System_Math_SqrtPhS_S__param_2];
	ld.f64 	%fd1, [%rd1];
	sqrt.rn.f64 	%fd2, %fd1;
	st.f64 	[%rd2], %fd2;
	mov.u64 	%rd3, 0;
	st.param.b64	[func_retval0+0], %rd3;
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot5[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<102>;


	mov.u64 	%rd101, __local_depot5;
	cvta.local.u64 	%SP, %rd101;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd38;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r40, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB5_13;

	add.s32 	%r15, %r4, -1024;
	shr.u32 	%r16, %r15, 6;
	mov.u32 	%r17, 15;
	sub.s32 	%r5, %r17, %r16;
	mov.u32 	%r18, 19;
	sub.s32 	%r19, %r18, %r16;
	mov.u32 	%r20, 18;
	min.s32 	%r6, %r20, %r19;
	mov.u64 	%rd94, 0;
	setp.ge.s32	%p2, %r5, %r6;
	mov.u64 	%rd93, %rd1;
	@%p2 bra 	BB5_4;

	mov.b64 	 %rd41, %fd4;
	shl.b64 	%rd42, %rd41, 11;
	or.b64  	%rd3, %rd42, -9223372036854775808;
	bfe.u32 	%r21, %r1, 20, 11;
	add.s32 	%r22, %r21, -1024;
	shr.u32 	%r23, %r22, 6;
	sub.s32 	%r25, %r17, %r23;
	mul.wide.s32 	%rd43, %r25, 8;
	mov.u64 	%rd44, __cudart_i2opi_d;
	add.s64 	%rd89, %rd44, %rd43;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd93, %rd1;
	mov.u64 	%rd91, %rd1;
	mov.u32 	%r39, %r5;

BB5_3:
	.pragma "nounroll";
	ld.const.u64 	%rd47, [%rd89];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd47;    
	mov.b64         {blo,bhi}, %rd3;    
	mov.b64         {clo,chi}, %rd94;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd45, {r0,r1};      
	mov.b64         %rd94, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd91], %rd45;
	add.s32 	%r39, %r39, 1;
	sub.s32 	%r26, %r39, %r5;
	mul.wide.s32 	%rd50, %r26, 8;
	add.s64 	%rd91, %rd1, %rd50;
	add.s64 	%rd93, %rd93, 8;
	add.s64 	%rd89, %rd89, 8;
	setp.lt.s32	%p3, %r39, %r6;
	@%p3 bra 	BB5_3;

BB5_4:
	st.local.u64 	[%rd93], %rd94;
	ld.local.u64 	%rd95, [%rd1+16];
	ld.local.u64 	%rd96, [%rd1+24];
	and.b32  	%r9, %r3, 63;
	setp.eq.s32	%p4, %r9, 0;
	@%p4 bra 	BB5_6;

	mov.u32 	%r27, 64;
	sub.s32 	%r28, %r27, %r9;
	shl.b64 	%rd51, %rd96, %r9;
	shr.u64 	%rd52, %rd95, %r28;
	or.b64  	%rd96, %rd51, %rd52;
	shl.b64 	%rd53, %rd95, %r9;
	ld.local.u64 	%rd54, [%rd1+8];
	shr.u64 	%rd55, %rd54, %r28;
	or.b64  	%rd95, %rd55, %rd53;

BB5_6:
	cvta.to.local.u64 	%rd56, %rd37;
	shr.u64 	%rd57, %rd96, 62;
	cvt.u32.u64	%r29, %rd57;
	shr.u64 	%rd58, %rd95, 62;
	shl.b64 	%rd59, %rd96, 2;
	or.b64  	%rd98, %rd59, %rd58;
	shl.b64 	%rd97, %rd95, 2;
	shr.u64 	%rd60, %rd96, 61;
	cvt.u32.u64	%r30, %rd60;
	and.b32  	%r31, %r30, 1;
	add.s32 	%r32, %r31, %r29;
	neg.s32 	%r33, %r32;
	setp.eq.s32	%p5, %r40, 0;
	selp.b32	%r34, %r32, %r33, %p5;
	st.local.u32 	[%rd56], %r34;
	setp.eq.s32	%p6, %r31, 0;
	@%p6 bra 	BB5_8;

	mov.u64 	%rd64, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd64;
	mov.b64         {a2,a3}, %rd64;
	mov.b64         {b0,b1}, %rd97;
	mov.b64         {b2,b3}, %rd98;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd97, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	xor.b32  	%r40, %r40, -2147483648;

BB5_8:
	clz.b64 	%r41, %rd98;
	setp.eq.s32	%p7, %r41, 0;
	@%p7 bra 	BB5_10;

	shl.b64 	%rd67, %rd98, %r41;
	mov.u32 	%r35, 64;
	sub.s32 	%r36, %r35, %r41;
	shr.u64 	%rd68, %rd97, %r36;
	or.b64  	%rd98, %rd68, %rd67;

BB5_10:
	mov.u64 	%rd72, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd98;   
	mov.b64         {blo,bhi}, %rd72;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd69, {r0,r1};     
	mov.b64         %rd100, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd100, 1;
	@%p8 bra 	BB5_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd69;
	mov.b64         {a2,a3}, %rd100;
	mov.b64         {b0,b1}, %rd69;
	mov.b64         {b2,b3}, %rd100;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd73, {r0,r1};
	mov.b64         %rd100, {r2,r3};
	}
	// inline asm
	add.s32 	%r41, %r41, 1;

BB5_12:
	cvt.u64.u32	%rd79, %r40;
	shl.b64 	%rd80, %rd79, 32;
	mov.u32 	%r37, 1022;
	sub.s32 	%r38, %r37, %r41;
	cvt.u64.u32	%rd81, %r38;
	shl.b64 	%rd82, %rd81, 52;
	add.s64 	%rd83, %rd100, 1;
	shr.u64 	%rd84, %rd83, 10;
	add.s64 	%rd85, %rd84, 1;
	shr.u64 	%rd86, %rd85, 1;
	add.s64 	%rd87, %rd86, %rd82;
	or.b64  	%rd88, %rd87, %rd80;
	mov.b64 	 %fd4, %rd88;

BB5_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}

.func  (.param .b64 func_retval0) __internal_accurate_pow(
	.param .b64 __internal_accurate_pow_param_0,
	.param .b64 __internal_accurate_pow_param_1
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<53>;
	.reg .f64 	%fd<138>;


	ld.param.f64 	%fd12, [__internal_accurate_pow_param_0];
	ld.param.f64 	%fd13, [__internal_accurate_pow_param_1];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r50}, %fd12;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r49, %temp}, %fd12;
	}
	shr.u32 	%r51, %r50, 20;
	setp.ne.s32	%p1, %r51, 0;
	@%p1 bra 	BB6_2;

	mul.f64 	%fd14, %fd12, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r50}, %fd14;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r49, %temp}, %fd14;
	}
	shr.u32 	%r16, %r50, 20;
	add.s32 	%r51, %r16, -54;

BB6_2:
	add.s32 	%r52, %r51, -1023;
	and.b32  	%r17, %r50, -2146435073;
	or.b32  	%r18, %r17, 1072693248;
	mov.b64 	%fd135, {%r49, %r18};
	setp.lt.u32	%p2, %r18, 1073127583;
	@%p2 bra 	BB6_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r19, %temp}, %fd135;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd135;
	}
	add.s32 	%r21, %r20, -1048576;
	mov.b64 	%fd135, {%r19, %r21};
	add.s32 	%r52, %r51, -1022;

BB6_4:
	add.f64 	%fd15, %fd135, 0d3FF0000000000000;
	rcp.approx.ftz.f64 	%fd16, %fd15;
	neg.f64 	%fd17, %fd15;
	mov.f64 	%fd18, 0d3FF0000000000000;
	fma.rn.f64 	%fd19, %fd17, %fd16, %fd18;
	fma.rn.f64 	%fd20, %fd19, %fd19, %fd19;
	fma.rn.f64 	%fd21, %fd20, %fd16, %fd16;
	add.f64 	%fd22, %fd135, 0dBFF0000000000000;
	mul.f64 	%fd23, %fd22, %fd21;
	fma.rn.f64 	%fd24, %fd22, %fd21, %fd23;
	mul.f64 	%fd25, %fd24, %fd24;
	mov.f64 	%fd26, 0d3ED0F5D241AD3B5A;
	mov.f64 	%fd27, 0d3EB0F5FF7D2CAFE2;
	fma.rn.f64 	%fd28, %fd27, %fd25, %fd26;
	mov.f64 	%fd29, 0d3EF3B20A75488A3F;
	fma.rn.f64 	%fd30, %fd28, %fd25, %fd29;
	mov.f64 	%fd31, 0d3F1745CDE4FAECD5;
	fma.rn.f64 	%fd32, %fd30, %fd25, %fd31;
	mov.f64 	%fd33, 0d3F3C71C7258A578B;
	fma.rn.f64 	%fd34, %fd32, %fd25, %fd33;
	mov.f64 	%fd35, 0d3F6249249242B910;
	fma.rn.f64 	%fd36, %fd34, %fd25, %fd35;
	mov.f64 	%fd37, 0d3F89999999999DFB;
	fma.rn.f64 	%fd38, %fd36, %fd25, %fd37;
	sub.f64 	%fd39, %fd22, %fd24;
	add.f64 	%fd40, %fd39, %fd39;
	neg.f64 	%fd41, %fd24;
	fma.rn.f64 	%fd42, %fd41, %fd22, %fd40;
	mul.f64 	%fd43, %fd21, %fd42;
	fma.rn.f64 	%fd44, %fd25, %fd38, 0d3FB5555555555555;
	mov.f64 	%fd45, 0d3FB5555555555555;
	sub.f64 	%fd46, %fd45, %fd44;
	fma.rn.f64 	%fd47, %fd25, %fd38, %fd46;
	add.f64 	%fd48, %fd47, 0d0000000000000000;
	add.f64 	%fd49, %fd48, 0dBC46A4CB00B9E7B0;
	add.f64 	%fd50, %fd44, %fd49;
	sub.f64 	%fd51, %fd44, %fd50;
	add.f64 	%fd52, %fd49, %fd51;
	mul.rn.f64 	%fd53, %fd24, %fd24;
	neg.f64 	%fd54, %fd53;
	fma.rn.f64 	%fd55, %fd24, %fd24, %fd54;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd43;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %fd43;
	}
	add.s32 	%r24, %r23, 1048576;
	mov.b64 	%fd56, {%r22, %r24};
	fma.rn.f64 	%fd57, %fd24, %fd56, %fd55;
	mul.rn.f64 	%fd58, %fd53, %fd24;
	neg.f64 	%fd59, %fd58;
	fma.rn.f64 	%fd60, %fd53, %fd24, %fd59;
	fma.rn.f64 	%fd61, %fd53, %fd43, %fd60;
	fma.rn.f64 	%fd62, %fd57, %fd24, %fd61;
	mul.rn.f64 	%fd63, %fd50, %fd58;
	neg.f64 	%fd64, %fd63;
	fma.rn.f64 	%fd65, %fd50, %fd58, %fd64;
	fma.rn.f64 	%fd66, %fd50, %fd62, %fd65;
	fma.rn.f64 	%fd67, %fd52, %fd58, %fd66;
	add.f64 	%fd68, %fd63, %fd67;
	sub.f64 	%fd69, %fd63, %fd68;
	add.f64 	%fd70, %fd67, %fd69;
	add.f64 	%fd71, %fd24, %fd68;
	sub.f64 	%fd72, %fd24, %fd71;
	add.f64 	%fd73, %fd68, %fd72;
	add.f64 	%fd74, %fd70, %fd73;
	add.f64 	%fd75, %fd43, %fd74;
	add.f64 	%fd76, %fd71, %fd75;
	sub.f64 	%fd77, %fd71, %fd76;
	add.f64 	%fd78, %fd75, %fd77;
	xor.b32  	%r25, %r52, -2147483648;
	mov.u32 	%r26, 1127219200;
	mov.b64 	%fd79, {%r25, %r26};
	mov.u32 	%r27, -2147483648;
	mov.b64 	%fd80, {%r27, %r26};
	sub.f64 	%fd81, %fd79, %fd80;
	mov.f64 	%fd82, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd83, %fd81, %fd82, %fd76;
	neg.f64 	%fd84, %fd81;
	fma.rn.f64 	%fd85, %fd84, %fd82, %fd83;
	sub.f64 	%fd86, %fd85, %fd76;
	sub.f64 	%fd87, %fd78, %fd86;
	mov.f64 	%fd88, 0d3C7ABC9E3B39803F;
	fma.rn.f64 	%fd89, %fd81, %fd88, %fd87;
	add.f64 	%fd90, %fd83, %fd89;
	sub.f64 	%fd91, %fd83, %fd90;
	add.f64 	%fd92, %fd89, %fd91;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %fd13;
	}
	add.s32 	%r29, %r28, %r28;
	setp.gt.u32	%p3, %r29, -33554433;
	and.b32  	%r30, %r28, -15728641;
	selp.b32	%r31, %r30, %r28, %p3;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r32, %temp}, %fd13;
	}
	mov.b64 	%fd93, {%r32, %r31};
	mul.rn.f64 	%fd94, %fd90, %fd93;
	neg.f64 	%fd95, %fd94;
	fma.rn.f64 	%fd96, %fd90, %fd93, %fd95;
	fma.rn.f64 	%fd97, %fd92, %fd93, %fd96;
	add.f64 	%fd4, %fd94, %fd97;
	sub.f64 	%fd98, %fd94, %fd4;
	add.f64 	%fd5, %fd97, %fd98;
	mov.f64 	%fd99, 0d4338000000000000;
	mov.f64 	%fd100, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd101, %fd4, %fd100, %fd99;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r13, %temp}, %fd101;
	}
	mov.f64 	%fd102, 0dC338000000000000;
	add.rn.f64 	%fd103, %fd101, %fd102;
	mov.f64 	%fd104, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd105, %fd103, %fd104, %fd4;
	mov.f64 	%fd106, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd107, %fd103, %fd106, %fd105;
	mov.f64 	%fd108, 0d3E928AF3FCA213EA;
	mov.f64 	%fd109, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd110, %fd109, %fd107, %fd108;
	mov.f64 	%fd111, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd112, %fd110, %fd107, %fd111;
	mov.f64 	%fd113, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd114, %fd112, %fd107, %fd113;
	mov.f64 	%fd115, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd116, %fd114, %fd107, %fd115;
	mov.f64 	%fd117, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd118, %fd116, %fd107, %fd117;
	mov.f64 	%fd119, 0d3F81111111122322;
	fma.rn.f64 	%fd120, %fd118, %fd107, %fd119;
	mov.f64 	%fd121, 0d3FA55555555502A1;
	fma.rn.f64 	%fd122, %fd120, %fd107, %fd121;
	mov.f64 	%fd123, 0d3FC5555555555511;
	fma.rn.f64 	%fd124, %fd122, %fd107, %fd123;
	mov.f64 	%fd125, 0d3FE000000000000B;
	fma.rn.f64 	%fd126, %fd124, %fd107, %fd125;
	fma.rn.f64 	%fd127, %fd126, %fd107, %fd18;
	fma.rn.f64 	%fd128, %fd127, %fd107, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r14, %temp}, %fd128;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd128;
	}
	shl.b32 	%r33, %r13, 20;
	add.s32 	%r34, %r15, %r33;
	mov.b64 	%fd136, {%r14, %r34};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r35}, %fd4;
	}
	mov.b32 	 %f2, %r35;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p4, %f1, 0f4086232B;
	@%p4 bra 	BB6_7;

	setp.lt.f64	%p5, %fd4, 0d0000000000000000;
	add.f64 	%fd129, %fd4, 0d7FF0000000000000;
	selp.f64	%fd136, 0d0000000000000000, %fd129, %p5;
	setp.geu.f32	%p6, %f1, 0f40874800;
	@%p6 bra 	BB6_7;

	mov.f64 	%fd134, 0d4338000000000000;
	mov.f64 	%fd133, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd132, %fd4, %fd133, %fd134;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r48, %temp}, %fd132;
	}
	shr.u32 	%r36, %r48, 31;
	add.s32 	%r37, %r48, %r36;
	shr.s32 	%r38, %r37, 1;
	shl.b32 	%r39, %r38, 20;
	add.s32 	%r40, %r39, %r15;
	mov.b64 	%fd130, {%r14, %r40};
	sub.s32 	%r41, %r48, %r38;
	shl.b32 	%r42, %r41, 20;
	add.s32 	%r43, %r42, 1072693248;
	mov.u32 	%r44, 0;
	mov.b64 	%fd131, {%r44, %r43};
	mul.f64 	%fd136, %fd130, %fd131;

BB6_7:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r45}, %fd136;
	}
	and.b32  	%r46, %r45, 2147483647;
	setp.ne.s32	%p7, %r46, 2146435072;
	@%p7 bra 	BB6_9;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r47, %temp}, %fd136;
	}
	setp.eq.s32	%p8, %r47, 0;
	@%p8 bra 	BB6_10;

BB6_9:
	fma.rn.f64 	%fd136, %fd136, %fd5, %fd136;

BB6_10:
	st.param.f64	[func_retval0+0], %fd136;
	ret;
}


