//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-22781540
// Cuda compilation tools, release 9.0, V9.0.176
// Based on LLVM 3.4svn
//

.version 6.0
.target sm_35
.address_size 64

	// .weak	cudaMalloc
.extern .func  (.param .b64 func_retval0) _Z14Heap_AllocTypeP12tMD_TypeDef_
(
	.param .b64 _Z14Heap_AllocTypeP12tMD_TypeDef__param_0
)
;
.extern .func _Z20Heap_MakeUndeletablePh
(
	.param .b64 _Z20Heap_MakeUndeletablePh_param_0
)
;
.extern .func  (.param .b64 func_retval0) _Z9gpumallocy
(
	.param .b64 _Z9gpumallocy_param_0
)
;
.extern .func _Z5CrashPKcz
(
	.param .b64 _Z5CrashPKcz_param_0,
	.param .align 8 .b8 %VAParam[]
)
;
.extern .func  (.param .b64 func_retval0) _Z11MethodStateP8tThread_P10tMetaData_jP13tMethodState_
(
	.param .b64 _Z11MethodStateP8tThread_P10tMetaData_jP13tMethodState__param_0,
	.param .b64 _Z11MethodStateP8tThread_P10tMetaData_jP13tMethodState__param_1,
	.param .b32 _Z11MethodStateP8tThread_P10tMetaData_jP13tMethodState__param_2,
	.param .b64 _Z11MethodStateP8tThread_P10tMetaData_jP13tMethodState__param_3
)
;
.extern .func free
(
	.param .b64 free_param_0
)
;
.extern .func _Z18Heap_MakeDeletablePh
(
	.param .b64 _Z18Heap_MakeDeletablePh_param_0
)
;
.extern .func _Z5log_fjPKcz
(
	.param .b32 _Z5log_fjPKcz_param_0,
	.param .b64 _Z5log_fjPKcz_param_1,
	.param .align 8 .b8 %VAParam[]
)
;
.extern .func  (.param .b64 func_retval0) _Z6msTimev
(

)
;
.extern .func _Z7SleepMSj
(
	.param .b32 _Z7SleepMSj_param_0
)
;
.extern .func _Z13Heap_SetRootsP11tHeapRoots_Pvj
(
	.param .b64 _Z13Heap_SetRootsP11tHeapRoots_Pvj_param_0,
	.param .b64 _Z13Heap_SetRootsP11tHeapRoots_Pvj_param_1,
	.param .b32 _Z13Heap_SetRootsP11tHeapRoots_Pvj_param_2
)
;
.global .align 8 .u64 __nv_static_27__14_Thread_cpp1_ii_427e0b11_pAllThreads;
.global .align 8 .u64 __nv_static_27__14_Thread_cpp1_ii_427e0b11_pCurrentThread;
.global .align 4 .u32 _ZZ6ThreadvE8threadID;
.extern .global .align 8 .b64 types;
.global .align 16 .b8 $str[32] = {84, 104, 114, 101, 97, 100, 45, 108, 111, 99, 97, 108, 32, 115, 116, 97, 99, 107, 32, 105, 115, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0};
.global .align 16 .b8 $str1[39] = {84, 104, 114, 101, 97, 100, 32, 73, 68, 35, 37, 100, 32, 101, 120, 105, 116, 101, 100, 46, 32, 82, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 58, 32, 37, 100, 10, 0};

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z6Threadv
.visible .func  (.param .b64 func_retval0) _Z6Threadv(

)
{
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<9>;


	ld.global.u64 	%rd1, [types];
	ld.u64 	%rd2, [%rd1+264];
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z14Heap_AllocTypeP12tMD_TypeDef_, 
	(
	param0
	);
	ld.param.b64	%rd3, [retval0+0];
	
	//{
	}// Callseq End 0
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	call.uni 
	_Z20Heap_MakeUndeletablePh, 
	(
	param0
	);
	
	//{
	}// Callseq End 1
	ld.global.u32 	%r1, [_ZZ6ThreadvE8threadID];
	add.s32 	%r2, %r1, 1;
	st.global.u32 	[_ZZ6ThreadvE8threadID], %r2;
	st.u32 	[%rd3], %r2;
	mov.u32 	%r3, 0;
	st.u32 	[%rd3+48], %r3;
	st.u32 	[%rd3+64], %r3;
	st.u32 	[%rd3+96], %r3;
	mov.u32 	%r4, 8;
	st.u32 	[%rd3+24], %r4;
	mov.u64 	%rd4, 0;
	st.u64 	[%rd3+40], %rd4;
	st.u64 	[%rd3+88], %rd4;
	st.u64 	[%rd3+8], %rd4;
	st.u64 	[%rd3+16], %rd4;
	mov.u64 	%rd5, 10016;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z9gpumallocy, 
	(
	param0
	);
	ld.param.b64	%rd6, [retval0+0];
	
	//{
	}// Callseq End 2
	st.u64 	[%rd3+104], %rd6;
	st.u32 	[%rd6+10000], %r3;
	ld.u64 	%rd7, [%rd3+104];
	st.u64 	[%rd7+10008], %rd4;
	ld.global.u64 	%rd8, [__nv_static_27__14_Thread_cpp1_ii_427e0b11_pAllThreads];
	st.u64 	[%rd3+112], %rd8;
	st.global.u64 	[__nv_static_27__14_Thread_cpp1_ii_427e0b11_pAllThreads], %rd3;
	st.param.b64	[func_retval0+0], %rd3;
	ret;
}

	// .globl	_Z17Thread_StackAllocP8tThread_j
.visible .func  (.param .b64 func_retval0) _Z17Thread_StackAllocP8tThread_j(
	.param .b64 _Z17Thread_StackAllocP8tThread_j_param_0,
	.param .b32 _Z17Thread_StackAllocP8tThread_j_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd9, [_Z17Thread_StackAllocP8tThread_j_param_0];
	ld.param.u32 	%r1, [_Z17Thread_StackAllocP8tThread_j_param_1];
	ld.u64 	%rd1, [%rd9+104];
	add.s64 	%rd2, %rd1, 10000;
	ld.u32 	%rd3, [%rd1+10000];
	add.s64 	%rd10, %rd1, %rd3;
	mov.u32 	%r2, -1414812757;
	st.u32 	[%rd10], %r2;
	ld.u32 	%r3, [%rd1+10000];
	add.s32 	%r4, %r1, %r3;
	add.s32 	%r5, %r4, 4;
	st.u32 	[%rd1+10000], %r5;
	setp.lt.u32	%p1, %r5, 10001;
	@%p1 bra 	BB7_2;

	mov.u64 	%rd11, $str;
	cvta.global.u64 	%rd12, %rd11;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	call.uni 
	_Z5CrashPKcz, 
	(
	param0
	);
	
	//{
	}// Callseq End 3

BB7_2:
	add.s64 	%rd4, %rd3, 4;
	add.s64 	%rd5, %rd1, %rd4;
	cvt.u64.u32	%rd6, %r1;
	mov.u64 	%rd17, 0;
	setp.eq.s32	%p2, %r1, 0;
	@%p2 bra 	BB7_4;

BB7_3:
	add.s64 	%rd14, %rd5, %rd17;
	mov.u16 	%rs1, 205;
	st.u8 	[%rd14], %rs1;
	add.s64 	%rd17, %rd17, 1;
	setp.lt.u64	%p3, %rd17, %rd6;
	@%p3 bra 	BB7_3;

BB7_4:
	add.s64 	%rd15, %rd4, %rd6;
	add.s64 	%rd16, %rd1, %rd15;
	mov.u32 	%r6, -67372037;
	st.u32 	[%rd16], %r6;
	ld.u32 	%r7, [%rd2];
	add.s32 	%r8, %r7, 4;
	st.u32 	[%rd2], %r8;
	st.param.b64	[func_retval0+0], %rd5;
	ret;
}

	// .globl	_Z16Thread_StackFreeP8tThread_Pv
.visible .func _Z16Thread_StackFreeP8tThread_Pv(
	.param .b64 _Z16Thread_StackFreeP8tThread_Pv_param_0,
	.param .b64 _Z16Thread_StackFreeP8tThread_Pv_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd7, [_Z16Thread_StackFreeP8tThread_Pv_param_0];
	ld.param.u64 	%rd8, [_Z16Thread_StackFreeP8tThread_Pv_param_1];
	ld.u64 	%rd9, [%rd7+104];
	add.s64 	%rd1, %rd8, -4;
	add.s64 	%rd2, %rd9, 10000;
	ld.u32 	%r2, [%rd9+10000];
	sub.s64 	%rd10, %rd1, %rd9;
	cvt.u32.u64	%r1, %rd10;
	sub.s32 	%r3, %r2, %r1;
	cvt.u64.u32	%rd3, %r3;
	mov.u64 	%rd12, 0;
	setp.eq.s32	%p1, %r3, 0;
	@%p1 bra 	BB8_2;

BB8_1:
	add.s64 	%rd11, %rd1, %rd12;
	mov.u16 	%rs1, 254;
	st.u8 	[%rd11], %rs1;
	add.s64 	%rd12, %rd12, 1;
	setp.lt.u64	%p2, %rd12, %rd3;
	@%p2 bra 	BB8_1;

BB8_2:
	st.u32 	[%rd2], %r1;
	ret;
}

	// .globl	_Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj
.visible .func _Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj(
	.param .b64 _Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_0,
	.param .b64 _Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_1,
	.param .b32 _Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_2,
	.param .b64 _Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_3,
	.param .b32 _Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd7, [_Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_0];
	ld.param.u64 	%rd8, [_Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_1];
	ld.param.u32 	%r2, [_Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_2];
	ld.param.u64 	%rd6, [_Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_3];
	ld.param.u32 	%r1, [_Z20Thread_SetEntryPointP8tThread_P10tMetaData_jPhj_param_4];
	mov.u64 	%rd13, 0;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z11MethodStateP8tThread_P10tMetaData_jP13tMethodState_, 
	(
	param0, 
	param1, 
	param2, 
	param3
	);
	ld.param.b64	%rd1, [retval0+0];
	
	//{
	}// Callseq End 4
	st.u64 	[%rd7+40], %rd1;
	setp.eq.s32	%p1, %r1, 0;
	@%p1 bra 	BB9_3;

	ld.u64 	%rd2, [%rd1+48];
	cvt.u64.u32	%rd3, %r1;
	@%p1 bra 	BB9_3;

BB9_2:
	add.s64 	%rd11, %rd6, %rd13;
	ld.u8 	%rs1, [%rd11];
	add.s64 	%rd12, %rd2, %rd13;
	st.u8 	[%rd12], %rs1;
	add.s64 	%rd13, %rd13, 1;
	setp.lt.u64	%p3, %rd13, %rd3;
	@%p3 bra 	BB9_2;

BB9_3:
	ret;
}

	// .globl	_Z14Thread_Executev
.visible .func  (.param .b32 func_retval0) _Z14Thread_Executev(

)
{
	.reg .pred 	%p<17>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<50>;


	ld.global.u64 	%rd47, [__nv_static_27__14_Thread_cpp1_ii_427e0b11_pAllThreads];
	mov.u32 	%r6, 0;
	st.u32 	[%rd47+24], %r6;
	st.global.u64 	[__nv_static_27__14_Thread_cpp1_ii_427e0b11_pCurrentThread], %rd47;
	bra.uni 	BB10_1;

BB10_14:
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	call.uni 
	free, 
	(
	param0
	);
	
	//{
	}// Callseq End 9
	mov.u64 	%rd39, 0;
	st.u64 	[%rd14+64], %rd39;

BB10_1:
	add.s64 	%rd3, %rd47, 48;
	ld.u32 	%r1, [%rd47+48];
	ld.u32 	%r7, [%rd47];
	mov.u64 	%rd24, $str1;
	cvta.global.u64 	%rd25, %rd24;
	mov.u32 	%r8, 1;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd25;
	.param .align 8 .b8 param2[8];
	st.param.b32	[param2+0], %r7;
	st.param.b32	[param2+4], %r1;
	call.uni 
	_Z5log_fjPKcz, 
	(
	param0, 
	param1, 
	param2
	);
	
	//{
	}// Callseq End 5
	mov.u64 	%rd26, __nv_static_27__14_Thread_cpp1_ii_427e0b11_pAllThreads;
	cvta.global.u64 	%rd44, %rd26;

BB10_2:
	mov.u64 	%rd4, %rd44;
	ld.u64 	%rd27, [%rd4];
	add.s64 	%rd44, %rd27, 112;
	setp.ne.s64	%p1, %rd27, %rd47;
	@%p1 bra 	BB10_2;

	ld.u64 	%rd28, [%rd44];
	st.u64 	[%rd4], %rd28;
	ld.u64 	%rd45, [%rd3+56];
	setp.eq.s64	%p2, %rd45, 0;
	@%p2 bra 	BB10_5;

BB10_4:
	ld.u64 	%rd8, [%rd45+10008];
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd45;
	call.uni 
	free, 
	(
	param0
	);
	
	//{
	}// Callseq End 6
	setp.ne.s64	%p3, %rd8, 0;
	mov.u64 	%rd45, %rd8;
	@%p3 bra 	BB10_4;

BB10_5:
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd47;
	call.uni 
	_Z18Heap_MakeDeletablePh, 
	(
	param0
	);
	
	//{
	}// Callseq End 7
	ld.global.u64 	%rd9, [__nv_static_27__14_Thread_cpp1_ii_427e0b11_pAllThreads];
	setp.eq.s64	%p4, %rd9, 0;
	mov.u64 	%rd46, %rd9;
	@%p4 bra 	BB10_20;

BB10_6:
	add.s64 	%rd11, %rd46, 24;
	ld.u32 	%r10, [%rd46+24];
	shr.u32 	%r11, %r10, 2;
	and.b32  	%r12, %r11, 1;
	setp.eq.b32	%p5, %r12, 1;
	and.b32  	%r13, %r10, -5;
	setp.eq.s32	%p6, %r13, 8;
	or.pred  	%p7, %p5, %p6;
	mov.u32 	%r21, -1;
	@%p7 bra 	BB10_19;
	bra.uni 	BB10_7;

BB10_19:
	ld.u64 	%rd46, [%rd11+88];
	setp.ne.s64	%p16, %rd46, 0;
	@%p16 bra 	BB10_6;
	bra.uni 	BB10_20;

BB10_18:
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r21;
	call.uni 
	_Z7SleepMSj, 
	(
	param0
	);
	
	//{
	}// Callseq End 11

BB10_7:
	mov.u64 	%rd47, %rd9;

BB10_8:
	ld.u64 	%rd29, [%rd47+112];
	setp.eq.s64	%p8, %rd29, 0;
	ld.global.u64 	%rd30, [__nv_static_27__14_Thread_cpp1_ii_427e0b11_pAllThreads];
	selp.b64	%rd47, %rd30, %rd29, %p8;
	st.global.u64 	[__nv_static_27__14_Thread_cpp1_ii_427e0b11_pCurrentThread], %rd47;
	add.s64 	%rd14, %rd47, 24;
	ld.u32 	%r14, [%rd47+24];
	and.b32  	%r15, %r14, -5;
	setp.ne.s32	%p9, %r15, 0;
	@%p9 bra 	BB10_8;

	ld.u64 	%rd15, [%rd14+64];
	setp.eq.s64	%p10, %rd15, 0;
	@%p10 bra 	BB10_1;

	ld.u32 	%r16, [%rd15];
	setp.gt.s32	%p11, %r16, -1;
	@%p11 bra 	BB10_15;
	bra.uni 	BB10_11;

BB10_15:
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 retval0;
	call.uni (retval0), 
	_Z6msTimev, 
	(
	);
	ld.param.b64	%rd40, [retval0+0];
	
	//{
	}// Callseq End 10
	ld.u64 	%rd41, [%rd15+24];
	sub.s64 	%rd42, %rd40, %rd41;
	cvt.u32.u64	%r19, %rd42;
	ld.u32 	%r20, [%rd15];
	sub.s32 	%r3, %r20, %r19;
	setp.lt.s32	%p14, %r3, 1;
	@%p14 bra 	BB10_1;

	min.u32 	%r21, %r3, %r21;
	bra.uni 	BB10_17;

BB10_11:
	ld.u64 	%rd33, [%rd14+16];
	add.s64 	%rd17, %rd33, 8;
	ld.u64 	%rd34, [%rd33+8];
	ld.u64 	%rd18, [%rd33+48];
	mov.u64 	%rd48, 0;
	ld.u8 	%rs1, [%rd34+26];
	and.b16  	%rs2, %rs1, 16;
	setp.ne.s16	%p12, %rs2, 0;
	mov.u64 	%rd49, %rd48;
	@%p12 bra 	BB10_13;

	ld.u64 	%rd48, [%rd18];
	mov.u64 	%rd49, 4;

BB10_13:
	ld.u64 	%rd36, [%rd15+8];
	ld.u64 	%rd37, [%rd17+24];
	add.s64 	%rd38, %rd18, %rd49;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd48;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd38;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd37;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd15;
	.param .b32 retval0;
	prototype_8 : .callprototype (.param .b32 _) _ (.param .b64 _, .param .b64 _, .param .b64 _, .param .b64 _);
	call (retval0), 
	%rd36, 
	(
	param0, 
	param1, 
	param2, 
	param3
	)
	, prototype_8;
	ld.param.b32	%r18, [retval0+0];
	
	//{
	}// Callseq End 8
	setp.eq.s32	%p13, %r18, 0;
	mov.u32 	%r21, 5;
	@%p13 bra 	BB10_17;
	bra.uni 	BB10_14;

BB10_17:
	setp.ne.s64	%p15, %rd47, %rd9;
	@%p15 bra 	BB10_8;
	bra.uni 	BB10_18;

BB10_20:
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z17Thread_GetCurrentv
.visible .func  (.param .b64 func_retval0) _Z17Thread_GetCurrentv(

)
{
	.reg .b64 	%rd<2>;


	ld.global.u64 	%rd1, [__nv_static_27__14_Thread_cpp1_ii_427e0b11_pCurrentThread];
	st.param.b64	[func_retval0+0], %rd1;
	ret;
}

	// .globl	_Z19Thread_GetHeapRootsP11tHeapRoots_
.visible .func _Z19Thread_GetHeapRootsP11tHeapRoots_(
	.param .b64 _Z19Thread_GetHeapRootsP11tHeapRoots__param_0
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd8, [_Z19Thread_GetHeapRootsP11tHeapRoots__param_0];
	ld.global.u64 	%rd15, [__nv_static_27__14_Thread_cpp1_ii_427e0b11_pAllThreads];
	setp.eq.s64	%p1, %rd15, 0;
	@%p1 bra 	BB12_4;

BB12_1:
	add.s64 	%rd3, %rd15, 40;
	ld.u64 	%rd16, [%rd15+40];
	setp.eq.s64	%p2, %rd16, 0;
	@%p2 bra 	BB12_3;

BB12_2:
	ld.u64 	%rd9, [%rd16+32];
	ld.u64 	%rd10, [%rd16+8];
	ld.u64 	%rd11, [%rd10+56];
	ld.u32 	%r1, [%rd11+8];
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	call.uni 
	_Z13Heap_SetRootsP11tHeapRoots_Pvj, 
	(
	param0, 
	param1, 
	param2
	);
	
	//{
	}// Callseq End 12
	ld.u64 	%rd12, [%rd16+48];
	ld.u64 	%rd13, [%rd16+8];
	ld.u64 	%rd14, [%rd13+56];
	ld.u32 	%r2, [%rd14+12];
	ld.u32 	%r3, [%rd13+80];
	add.s32 	%r4, %r2, %r3;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	call.uni 
	_Z13Heap_SetRootsP11tHeapRoots_Pvj, 
	(
	param0, 
	param1, 
	param2
	);
	
	//{
	}// Callseq End 13
	ld.u64 	%rd16, [%rd16+96];
	setp.ne.s64	%p3, %rd16, 0;
	@%p3 bra 	BB12_2;

BB12_3:
	ld.u64 	%rd15, [%rd3+72];
	setp.ne.s64	%p4, %rd15, 0;
	@%p4 bra 	BB12_1;

BB12_4:
	ret;
}


